name: Phalcon CI

on:
  schedule:
    - cron: '0 2 * * *' # Daily at 02:00 runs only on default branch
  push:
    paths-ignore:
      - '**.md'
      - '**.txt'
  pull_request:

env:
  ZEPHIR_PARSER_VERSION: 1.4.1
  ZEPHIR_VERSION: 0.14.0
  PSR_VERSION: 1.1.0

  # For tests
  LANG: en_US.UTF-8
  LANGUAGE: en_US.UTF-8
  LC_ALL: en_US.UTF-8

jobs:
  phpcs:
    name: Validate Tests code style

    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Run PHP_CodeSniffer
        run: docker run --rm -v $(pwd):/data cytopia/phpcs --standard=./phpcs.xml


  stubs:
    name: Stubs validation for PHP ${{ matrix.php }}

    runs-on: ubuntu-20.04

    strategy:
      fail-fast: false
      matrix:
        php: ['7.4', '8.0']

    steps:
      - uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          tools: pecl
          extensions: mbstring, intl, json, imagick, redis, igbinary, apcu, msgpack, memcached, yaml, psr-${{ env.PSR_VERSION }}, zephir_parser-${{ env.ZEPHIR_PARSER_VERSION }}

      - name: Install System Dependencies
        run: |
          sudo apt update --quiet --yes 1>/dev/null
          sudo apt install --no-install-recommends -q -y re2c

      - run: composer install --prefer-dist

      - name: Install Zephir
        run: .ci/install-zephir.sh

      - name: Validate stubs
        if: always()
        run: |
          $HOME/bin/zephir stubs
          vendor/bin/psalm ide/

  generate:
    name: Build Phalcon PECL package

    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
          extensions: mbstring, intl, json, psr, zephir_parser-${{ env.ZEPHIR_PARSER_VERSION }}
          tools: pecl
        env:
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup APT Repositories
        run: |
          # We don't need this at all, and our
          # builds often fails because Microsoft
          # servers are unstable or even offline.
          sudo rm -f /etc/apt/sources.list.d/dotnetdev.list
          sudo rm -f /etc/apt/sources.list.d/azure*.list

      - name: Install System Dependencies
        run: |
          sudo apt-get update --quiet --yes 1>/dev/null
          sudo apt-get install --no-install-recommends -q -y re2c

      - name: Install Zephir
        run: .ci/install-zephir.sh

      - name: Generate C Code
        run: |
          $HOME/bin/zephir fullclean
          $HOME/bin/zephir generate
          (cd build && php gen-build.php)

      - name: Upload compile-errors.log
        uses: actions/upload-artifact@v2
        with:
          name: compile-errors
          path: compile-errors.log

      - name: Create Pecl Package (PHP 8)
        id: pecl_create
        run: |
          cp build/phalcon/config.w32 config.w32
          cp build/phalcon/phalcon.zep.c phalcon.zep.c
          cp build/phalcon/config.m4 config.m4
          cp build/phalcon/php_phalcon.h php_phalcon.h
          cp build/phalcon/phalcon.zep.h phalcon.zep.h
          pecl package
          phalcon_package="`ls | grep phalcon-*tgz`"
          mv $phalcon_package phalcon-pecl.tgz

      - name: Validate Pecl Package
        run: pecl package-validate phalcon-pecl.tgz

      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        with:
          name: 'phalcon-pecl'
          path: phalcon-pecl.tgz

  build-and-test-linux:
    name: Test on Linux PHP ${{ matrix.php }}-nts-x64
    # To prevent build a particular commit use
    #     git commit -m "......... [linux skip] - to skip only linux builds"
    if: "!contains(github.event.head_commit.message, '[linux skip]')"

    needs: [generate]
    services:
      mysql:
        image: mysql:5.7
        ports:
          - 3306
        env:
          MYSQL_ROOT_PASSWORD: secret
          MYSQL_USER: phalcon
          MYSQL_DATABASE: phalcon
          MYSQL_PASSWORD: secret
      postgres:
        image: postgres:12-alpine
        ports:
          - 5432
        env:
          POSTGRES_PASSWORD: secret
          POSTGRES_DB: phalcon
      redis:
        image: redis:5-alpine
        ports:
          - 6379
      memcached:
        image: memcached:1.5-alpine
        ports:
          - 11211

    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        php: ['7.4', '8.0']

    steps:
      - uses: actions/checkout@v2

      - name: Validate composer
        run: composer validate --no-check-all --no-check-publish

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Setup Composer Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: mbstring, intl, json, imagick, gd, gettext, igbinary, apcu, msgpack, memcached, yaml, redis
          ini-values: apc.enable_cli=on, session.save_path=/tmp
          tools: pecl
        env:
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Phalcon Pecl Package
        uses: actions/download-artifact@v1
        with:
          name: phalcon-pecl

      - name: Install package
        run: |
          export MAKEFLAGS="-j$(getconf _NPROCESSORS_ONLN)"
          sudo pecl -v install phalcon-pecl/phalcon-pecl.tgz

      - name: Verify Install
        run: php --ri phalcon

      - name: Setup locales
        run: |
          sudo sudo apt-get install tzdata locales -y
          sudo sed -i -e 's/# de_DE.UTF-8 UTF-8/de_DE.UTF-8 UTF-8/' /etc/locale.gen
          sudo sed -i -e 's/# el_GR.UTF-8 UTF-8/el_GR.UTF-8 UTF-8/' /etc/locale.gen
          sudo sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
          sudo sed -i -e 's/# es_ES.UTF-8 UTF-8/es_ES.UTF-8 UTF-8/' /etc/locale.gen
          sudo sed -i -e 's/# ru_RU.UTF-8 UTF-8/ru_RU.UTF-8 UTF-8/' /etc/locale.gen
          sudo dpkg-reconfigure --frontend=noninteractive locales
          sudo update-locale LANG=en_US.UTF-8

      - run: composer install --prefer-dist

      - name: Setup Tests
        run: |
          cp tests/_config/.env.default .env
          php tests/_config/generate-db-schemas.php
          vendor/bin/codecept build

      - name: Run Unit Tests
        if: always()
        run: vendor/bin/codecept run --coverage-xml=coverage-${{ matrix.php }}.xml --ext DotReporter unit

      - name: Run CLI Tests
        if: always()
        run: vendor/bin/codecept run --coverage-xml=coverage-${{ matrix.php }}.xml --ext DotReporter cli

      - name: Run Integration Tests
        env:
          DATA_REDIS_PORT: ${{ job.services.redis.ports['6379'] }}
          DATA_MEMCACHED_PORT: ${{ job.services.memcached.ports['11211'] }}
        if: always()
        run: vendor/bin/codecept run --coverage-xml=coverage-${{ matrix.php }}.xml --ext DotReporter integration

      - name: Run Database Tests (Common)
        env:
          DATA_REDIS_PORT: ${{ job.services.redis.ports['6379'] }}
          DATA_MEMCACHED_PORT: ${{ job.services.memcached.ports['11211'] }}
          DATA_MYSQL_USER: root
        if: always()
        run: vendor/bin/codecept run --coverage-xml=coverage-${{ matrix.php }}.xml --ext DotReporter database -g common

      - name: Run Database Tests (MySQL)
        env:
          DATA_MYSQL_PORT: ${{ job.services.mysql.ports['3306'] }}
          DATA_REDIS_PORT: ${{ job.services.redis.ports['6379'] }}
          DATA_MEMCACHED_PORT: ${{ job.services.memcached.ports['11211'] }}
          DATA_MYSQL_USER: root
        if: always()
        run: vendor/bin/codecept run --coverage-xml=coverage-${{ matrix.php }}.xml --ext DotReporter database --env mysql -g mysql

      - name: Run Database Tests (Sqlite)
        env:
          DATA_REDIS_PORT: ${{ job.services.redis.ports['6379'] }}
          DATA_MEMCACHED_PORT: ${{ job.services.memcached.ports['11211'] }}
        if: always()
        run: vendor/bin/codecept run --coverage-xml=coverage-${{ matrix.php }}.xml --ext DotReporter database --env sqlite -g sqlite

      - name: Run Database Tests (Postgres)
        env:
          DATA_POSTGRES_USER: postgres
          DATA_POSTGRES_PORT: ${{ job.services.postgres.ports['5432'] }}
          DATA_REDIS_PORT: ${{ job.services.redis.ports['6379'] }}
          DATA_MEMCACHED_PORT: ${{ job.services.memcached.ports['11211'] }}
        if: always()
        run: vendor/bin/codecept run --coverage-xml=coverage-${{ matrix.php }}.xml --ext DotReporter database --env pgsql -g pgsql

      # - name: Run Database Tests (SQL Server)
      #   env:
      #     DATA_REDIS_PORT: ${{ job.services.redis.ports['6379'] }}
      #     DATA_MEMCACHED_PORT: ${{ job.services.memcached.ports['11211'] }}
      #   run: vendor/bin/codecept run --ext DotReporter database --env sqlsrv

      - name: Upload Code Coverage on ${{ matrix.php }}
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./tests/_output/coverage-*.xml

  build-and-test-macos:
    name: Test on macOS PHP ${{ matrix.php }}-nts-x64

    # To prevent build a particular commit use
    #    git commit -m "......... [mac skip] - to skip only macOS builds"
    if: "!contains(github.event.head_commit.message, '[mac skip]')"

    needs: [generate]
    runs-on: macos-10.15

    env:
      extensions: mbstring, intl, json, yaml, apcu, imagick, gd, gettext, igbinary, msgpack, redis, zip
      HOMEBREW_NO_INSTALL_CLEANUP: 1
      ext_cache_key: v5.0.0-alpha.6-macOS-2

    strategy:
      fail-fast: false
      matrix:
        php: ['7.4', '8.0']

    steps:
      - uses: actions/checkout@v2

#      - name: Setup cache environment
#        id: extcache
#        uses: shivammathur/cache-extensions@v1
#        with:
#          php-version: ${{ matrix.php }}
#          extensions: ${{ env.extensions }}
#          key: ${{ env.ext_cache_key }}

#      - name: Cache extensions
#        uses: actions/cache@v2
#        with:
#          path: ${{ steps.extcache.outputs.dir }}
#          key: ${{ steps.extcache.outputs.key }}
#          restore-keys: ${{ steps.extcache.outputs.key }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          ini-values: apc.enable_cli=on, session.save_path=/tmp
          extensions: ${{ env.extensions }}
        env:
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Download Phalcon Pecl Package
        uses: actions/download-artifact@v1
        with:
          name: phalcon-pecl

      - name: Install Package
        run: |
          sudo xcode-select -s /Applications/Xcode_12.app
          xcodebuild -version
          export MAKEFLAGS="-j$(getconf _NPROCESSORS_ONLN)"
          sudo pecl -v install phalcon-pecl/phalcon-pecl.tgz
          sudo pecl -v install msgpack

      - name: Verify Install
        run: php --ri phalcon

      - name: Install Packages
        run: composer install --prefer-dist

      - name: Setup Tests
        run: |
          cp tests/_config/.env.default .env
          vendor/bin/codecept build

      - name: Run Unit Tests
        run: vendor/bin/codecept run --ext DotReporter unit

      - name: Run CLI Tests
        run: vendor/bin/codecept run --ext DotReporter cli

  build-and-test-windows:
    # To prevent build a particular commit use
    #    git commit -m "......... [win skip] - to skip only Windows builds"
    if: "!contains(github.event.head_commit.message, '[win skip]')"
    needs: [generate]

    name: Test on ${{ matrix.os }} PHP ${{ matrix.php }}-${{ matrix.ts }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}

    env:
      PHALCON_VERSION: 5.0.0alpha6
      PHP_SDK_VERSION: 2.2.0
      PHP_DEVPACK: 'C:\tools\php-devpack'
      PHP_PECL_PATH: 'C:\tools\pecl'
      PACKAGE_PREFIX: 'phalcon'
      EXTENSION_NAME: 'phalcon'
      EXTENSION_FILE: 'php_phalcon.dll'
      CACHE_DIR: 'C:\Downloads'

    strategy:
      fail-fast: false

      matrix:
        os: [windows-2016, windows-2019]
        php: ['7.4', '8.0']
        ts: ['ts', 'nts']
        arch: ['x64']

        include:
          - php: '7.4'
            msvc: 'vc15'
            os_name: 'windows2016'

          - php: '8.0'
            msvc: 'vs16'
            os_name: 'windows2019'

        exclude:
          - os: windows-2016
            php: '8.0'

          - os: windows-2019
            php: '7.4'

    steps:
      - uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: mbstring, intl, json, yaml, apcu, imagick, gd, gettext, igbinary, sqlite3, msgpack, psr, redis, zip
          tools: pecl
          ini-values: apc.enable_cli=on, session.save_path=C:\temp
        env:
          PHPTS: ${{ matrix.ts }}
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Environment Variables
        run: |
          $ReleaseFolder = if ("${{ matrix.ts }}" -eq "ts") { "Release_TS" } else { "Release" }
          $ReleaseFolder = if ("${{ matrix.arch }}" -eq "x64") { "x64\${ReleaseFolder}" } else { "${ReleaseFolder}" }
          Write-Output "RELEASE_FOLDER=$ReleaseFolder" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          $ReleaseDllPath = "${{ env.PHP_PECL_PATH }}\phalcon\phalcon-${{ env.PHALCON_VERSION }}\${ReleaseFolder}\${{ env.EXTENSION_FILE }}"
          Write-Output "RELEASE_DLL_PATH=$ReleaseDllPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          $ReleaseZipBall = "phalcon-php${{ matrix.php }}-${{ matrix.ts }}-${{ matrix.os_name }}-${{ matrix.vc_num }}-${{ matrix.arch }}"
          Write-Output "RELEASE_ZIPBALL=$ReleaseZipBall" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Setup Common Environment
        run: |
          git config --global core.autocrlf false
          mkdir "${{ env.CACHE_DIR }}\Choco"

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Setup Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Download Phalcon Pecl Package
        uses: actions/download-artifact@v1
        with:
          name: phalcon-pecl

      - name: Install System Dependencies
        run: choco install -y --cache-location=${{ env.CACHE_DIR }}\Choco re2c

      - name: Setup PHP SDK tool kit
        uses: zephir-lang/setup-php-sdk@v1
        with:
          php_version: ${{ matrix.php }}
          ts: ${{ matrix.ts }}
          msvc: ${{ matrix.msvc }}
          arch: ${{ matrix.arch }}
          install_dir: 'C:\tools'
          cache_dir: ${{ env.CACHE_DIR }}

      - name: Configure Developer Command Prompt for MSVC compiler
        uses: ilammy/msvc-dev-cmd@v1.9.0
        with:
          arch: ${{ matrix.arch }}

      - name: Getting Details About Installed PHP
        run: |
          Get-Php (Get-Command php).Path

      - name: Unpack Package
        run: |
          Import-Module .\.ci\win-ci-tools.psm1
          Expand-Item7zip "phalcon-pecl\phalcon-pecl.tgz" "${env:Temp}"
          Expand-Item7zip "${env:Temp}\phalcon-pecl.tar" "${env:PHP_PECL_PATH}\phalcon"

      - name: PSR extension | init, phpize
        run: |
          git clone https://github.com/jbboehr/php-psr.git ${{ env.PHP_PECL_PATH }}\psr\psr-${{ env.PSR_VERSION }}
          if (-not (Test-Path "${{ env.PHP_DEVPACK }}\include\ext\psr")) {
            mkdir "${{ env.PHP_DEVPACK }}\include\ext\psr"
          }
          Set-Location "${{ env.PHP_PECL_PATH }}\psr\psr-${{ env.PSR_VERSION }}"
          phpize

      - name: PSR extension | configure
        working-directory: '${{ env.PHP_PECL_PATH }}\psr\psr-${{ env.PSR_VERSION }}'
        run: |
          .\configure.bat --enable-psr

      - name: PSR extension | build
        working-directory: '${{ env.PHP_PECL_PATH }}\psr\psr-${{ env.PSR_VERSION }}'
        run: |
          nmake
          nmake install

      - name: PSR extension | Inspecting Extension DLL File
        run: |
          php  --ri psr
          Get-PhpExtension "${{ env.PHP_PECL_PATH }}\psr\psr-${{ env.PSR_VERSION }}\${{ env.RELEASE_FOLDER }}\php_psr.dll"

      - name: Phalcon | phpize
        working-directory: '${{ env.PHP_PECL_PATH }}\phalcon\phalcon-${{ env.PHALCON_VERSION }}'
        run: |
          phpize

      - name: Phalcon | Configure Project
        working-directory: '${{ env.PHP_PECL_PATH }}\phalcon\phalcon-${{ env.PHALCON_VERSION }}'
        run: |
          .\configure.bat --enable-phalcon `
            --with-extra-libs="${{ env.PHP_PECL_PATH }}\psr\psr-${{ env.PSR_VERSION }}\${{ env.RELEASE_FOLDER }}"

      - name: Phalcon | Build Project
        working-directory: '${{ env.PHP_PECL_PATH }}\phalcon\phalcon-${{ env.PHALCON_VERSION }}'
        run: |
          nmake

      - name: Inspecting Phalcon Extension DLL File
        run: |
          Get-PhpExtension "${{ env.RELEASE_DLL_PATH }}"

      - name: Prepare Build Artifact
        run: |
          $Destination = ".\build-artifacts"
          if (-not (Test-Path -Path $Destination -PathType Container)) {
            New-Item $Destination -ItemType Directory | Out-Null
          }
          Copy-Item -Path "${{ env.RELEASE_DLL_PATH }}" -Destination $Destination
          Copy-Item -Path ".\3rdparty\licenses\*.txt" -Destination $Destination
          Set-Location $Destination
          & 7z a "${{ env.RELEASE_ZIPBALL }}.zip" *

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.RELEASE_ZIPBALL }}.zip
          path: .\build-artifacts\phalcon*.zip

      - name: Enable Extensions
        run: |
          Import-Module .\.ci\win-ci-tools.psm1
          EnablePhalconExtension

      - name: Verify Install
        run: php --ri phalcon

      - name: Install Packages
        run: composer install --prefer-dist

      - name: Setup Tests
        run: |
          cp tests/_config/.env.default .env
          vendor/bin/codecept build

      - name: Run Unit Tests
        run: vendor/bin/codecept run --ext DotReporter unit

      - name: Run CLI Tests
        run: vendor/bin/codecept run --ext DotReporter cli

      - name: Upload tools artifacts after Failure
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: tools-${{ matrix.php }}
          path: |
            C:\tools\pecl\
            C:\tools\php\
            C:\tools\php-*\
          retention-days: 1

      - name: Upload build artifacts after Failure
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: ext-${{ matrix.php }}-${{ matrix.arch }}-${{ matrix.ts }}
          path: |
            ${{ github.workspace }}\ext\
            !${{ github.workspace }}\ext\x64\
          retention-days: 1

  install-from-build:
    name: PHP ${{ matrix.php }} Install from build
    runs-on: ubuntu-20.04

    strategy:
      fail-fast: false
      matrix:
        php: ['7.4', '8.0']

    steps:
      - uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: mbstring, intl, json, psr
          tools: pecl

      - name: Install from build/ directory
        run: |
          cd build/
          php gen-build.php
          sudo ./install

      - name: Validate extension
        if: success()
        run: php -d extension=phalcon -r 'echo (new Phalcon\Support\Version())->get();' || exit 1

  release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    needs: [generate, install-from-build, build-and-test-linux, build-and-test-macos, build-and-test-windows]
    name: Create Release
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - name: Get the release version
        id: get-version
        run: |
          echo ::set-output name=version::${GITHUB_REF#refs/tags/}

      - name: Download Phalcon build artifacts
        id: download
        uses: actions/download-artifact@v2
        with:
          path: ./build-artifacts

      - name: Prepare Release assets
        run: |
          mkdir -p ./build-artifacts/release
          find ./build-artifacts -type f -name phalcon*.zip -exec cp {} ./build-artifacts/release/ ";"
          find ./build-artifacts -type f -name phalcon*.tgz -exec cp {} ./build-artifacts/release/ ";"
          echo "-- Creating Release Notes"
          GITHUB_ACTIONS=false ./.ci/release-notes.sh ./CHANGELOG-5.0.md > ./build-artifacts/release/release-notes.md

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: ${{ steps.get-version.outputs.version }}
          tag: ${{ steps.get-version.outputs.version }}
          bodyFile: "./build-artifacts/release/release-notes.md"
          allowUpdates: true
          artifacts: "./build-artifacts/release/*.zip,./build-artifacts/release/*.tgz"
          artifactContentType: application/octet-stream
