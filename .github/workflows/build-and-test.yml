name: Phalcon CI

on:
  schedule:
    - cron: '0 2 * * *' # Daily at 02:00 runs only on default branch
  push:
    paths-ignore:
      - '**.md'
      - '**.txt'
  pull_request:

env:
  # All versions should be declared here
  PHALCON_VERSION: 5.0.0alpha6
  ZEPHIR_PARSER_VERSION: 1.4.1
  ZEPHIR_VERSION: 0.15.0
  PSR_VERSION: 1.1.0

  # For tests
  LANG: en_US.UTF-8
  LANGUAGE: en_US.UTF-8
  LC_ALL: en_US.UTF-8

  # Test credentials
  DB_USER: phalcon
  DB_PASS: secret
  DB_NAME: phalcon_test

  # PHP extensions required by Composer
  EXTENSIONS: apcu, gettext, gd, igbinary, imagick, intl, json, mbstring, msgpack, memcached, sqlite3, yaml, redis

jobs:
  phpcs:
    name: Validate Tests code style

    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Run PHP_CodeSniffer
        run: docker run --rm -v $(pwd):/data cytopia/phpcs --standard=./phpcs.xml

  stubs:
    name: Stubs validation for PHP ${{ matrix.php }}

    runs-on: ubuntu-20.04

    strategy:
      fail-fast: false
      matrix:
        php: ['7.4', '8.0']

    steps:
      - uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          tools: pecl
          extensions: psr-${{ env.PSR_VERSION }}, zephir_parser-${{ env.ZEPHIR_PARSER_VERSION }}

      - name: Install System Dependencies
        run: |
          sudo apt update --quiet --yes 1>/dev/null
          sudo apt install --no-install-recommends -q -y re2c

      - run: composer install --prefer-dist

      - name: Install Zephir
        run: .ci/install-zephir.sh

      - name: Validate stubs
        if: always()
        run: |
          $HOME/bin/zephir stubs
          vendor/bin/psalm ide/

  generate:
    name: Build Phalcon PECL package

    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
          extensions: psr-${{ env.PSR_VERSION }}, zephir_parser-${{ env.ZEPHIR_PARSER_VERSION }}
          tools: pecl
        env:
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup APT Repositories
        run: |
          # We don't need this at all, and our
          # builds often fails because Microsoft
          # servers are unstable or even offline.
          sudo rm -f /etc/apt/sources.list.d/dotnetdev.list
          sudo rm -f /etc/apt/sources.list.d/azure*.list

      - name: Install System Dependencies
        run: |
          sudo apt-get update --quiet --yes 1>/dev/null
          sudo apt-get install --no-install-recommends -q -y re2c

      - name: Install Zephir
        run: .ci/install-zephir.sh

      - name: Generate C Code
        run: |
          $HOME/bin/zephir fullclean
          $HOME/bin/zephir generate
          (cd build && php gen-build.php)

      - name: Upload compile-errors.log
        uses: actions/upload-artifact@v2
        with:
          name: compile-errors
          path: compile-errors.log

      - name: Create Pecl Package (PHP 8)
        id: pecl_create
        run: |
          cp build/phalcon/config.w32 config.w32
          cp build/phalcon/phalcon.zep.c phalcon.zep.c
          cp build/phalcon/config.m4 config.m4
          cp build/phalcon/php_phalcon.h php_phalcon.h
          cp build/phalcon/phalcon.zep.h phalcon.zep.h
          pecl package
          phalcon_package="`ls | grep phalcon-*tgz`"
          mv $phalcon_package phalcon-pecl.tgz

      - name: Validate Pecl Package
        run: pecl package-validate phalcon-pecl.tgz

      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        with:
          name: 'phalcon-pecl'
          path: phalcon-pecl.tgz

  build-and-test:
    name: Test with PHP-${{ matrix.php }}-${{ matrix.ts }}-${{ matrix.name }}-${{ matrix.arch }}"

    needs: [generate]

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        php: [ '7.4' ]
        ts: [ 'nts' ]
        arch: [ 'x64' ]

        name:
          - ubuntu-gcc
          - macos-clang
          - win2016-vc15
#          - win2019-vs16

        # matrix names should be in next format:
        #     {php}-{ts}-{os.name}-{compiler}-{arch}
        include:
          # Linux
          - name: ubuntu-gcc
            os: ubuntu-18.04
            compiler: gcc

          # macOS
          - name: macos-clang
            os: macos-10.15
            compiler: clang

          # Windows
          - name: win2016-vc15
            os: windows-2016
            compiler: vc15

#          - name: win2019-vs16
#            os: windows-2019
#            compiler: vs16

#        exclude:
#          - name: win2019-vs16
#            php: '7.4'
#
#          - name: win2016-vc15
#            php: '8.0'

    services:
      mysql:
        image: mysql:5.7
        ports:
          - 3306
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.DB_PASS }}
          MYSQL_USER: ${{ env.DB_USER }}
          MYSQL_DATABASE: ${{ env.DB_NAME }}
          MYSQL_PASSWORD: ${{ env.DB_PASS }}

      redis:
        image: redis:5-alpine
        ports:
          - 6379

      memcached:
        image: memcached:1.5-alpine
        ports:
          - 11211

    steps:
      - uses: actions/checkout@v2

      - name: Setup platform specific environment
        shell: pwsh
        run: |
          $SessionSavePath = '/tmp'

          if ("${{ runner.os }}" -eq "Windows") {
            git config --global core.autocrlf false

            $SessionSavePath = 'C:\temp'
          }

          Write-Output "SESSION_SAVE_PATH=$SessionSavePath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.EXTENSIONS }}, psr-${{ env.PSR_VERSION }}
          ini-values: apc.enable_cli=on, session.save_path=${{ env.SESSION_SAVE_PATH }}
          tools: pecl, phpize, php-config
          coverage: xdebug
        env:
          PHPTS: ${{ matrix.ts }}
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Phalcon Pecl Package
        uses: actions/download-artifact@v2
        with:
          name: phalcon-pecl
          path: ./phalcon-pecl

      - name: Build Phalcon Extension (Linux)
        uses: ./.github/actions/build-phalcon-linux
        if: runner.os == 'Linux'
        with:
          pecl: ./phalcon-pecl/phalcon-pecl.tgz

      - name: Build Phalcon Extension (macOS)
        uses: ./.github/actions/build-phalcon-mac
        if: runner.os == 'macOS'
        with:
          pecl: ./phalcon-pecl/phalcon-pecl.tgz

      - name: Build Phalcon Extension (Windows)
        uses: ./.github/actions/build-phalcon-win
        if: runner.os == 'Windows'
        with:
          pecl: 'phalcon-pecl\phalcon-pecl.tgz'
          php_version: ${{ matrix.php }}
          ts: ${{ matrix.ts }}
          msvc: ${{ matrix.compiler }}
          arch: ${{ matrix.arch }}
        env:
          CACHE_DIR: 'C:\Downloads'
          TOOLS_DIR: 'C:\tools'

      - name: Validate composer
        run: composer validate --no-check-all --no-check-publish

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Setup Composer Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ matrix.php }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-${{ matrix.php }}-

      - run: composer install --prefer-dist

      - name: Setup Tests
        shell: bash
        run: |
          if [ "${{ runner.os }}" = "Linux" ]; then
            ./.ci/linux-setup-locales.sh
          fi

          cp tests/_config/.env.default .env
          php tests/_config/generate-db-schemas.php
          vendor/bin/codecept build

      - name: Run Unit Tests
        if: always()
        run: vendor/bin/codecept run --coverage-xml=coverage-${{ matrix.php }}.xml --ext DotReporter unit

      - name: Run CLI Tests
        if: always()
        run: vendor/bin/codecept run --coverage-xml=coverage-${{ matrix.php }}.xml --ext DotReporter cli

      - name: Run Database Tests (MySQL)
        env:
          DATA_MYSQL_PORT: ${{ job.services.mysql.ports['3306'] }}
          DATA_REDIS_PORT: ${{ job.services.redis.ports['6379'] }}
          DATA_MEMCACHED_PORT: ${{ job.services.memcached.ports['11211'] }}
          DATA_MYSQL_USER: root
        if: always()
        run: vendor/bin/codecept run --coverage-xml=coverage-${{ matrix.php }}.xml --ext DotReporter database --env mysql -g mysql

  install-from-build:
    name: Install from build for PHP ${{ matrix.php }}-nts-x64
    runs-on: ubuntu-20.04

    strategy:
      fail-fast: false
      matrix:
        php: ['7.4', '8.0']

    steps:
      - uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: psr-${{ env.PSR_VERSION }}
          tools: pecl

      - name: Install from build/ directory
        run: |
          cd build/
          php gen-build.php
          sudo ./install

      - name: Validate extension
        if: success()
        run: php -d extension=phalcon -r 'echo (new Phalcon\Support\Version())->get();' || exit 1

  release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    needs: [generate, install-from-build, build-and-test]
    name: Create Release
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - name: Get the release version
        id: get-version
        run: |
          echo ::set-output name=version::${GITHUB_REF#refs/tags/}

      - name: Download Phalcon build artifacts
        id: download
        uses: actions/download-artifact@v2
        with:
          path: ./build-artifacts

      - name: Prepare Release assets
        run: |
          mkdir -p ./build-artifacts/release
          find ./build-artifacts -type f -name phalcon*.zip -exec cp {} ./build-artifacts/release/ ";"
          find ./build-artifacts -type f -name phalcon*.tgz -exec cp {} ./build-artifacts/release/ ";"
          echo "-- Creating Release Notes"
          GITHUB_ACTIONS=false ./.ci/release-notes.sh ./CHANGELOG-5.0.md > ./build-artifacts/release/release-notes.md

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: ${{ steps.get-version.outputs.version }}
          tag: ${{ steps.get-version.outputs.version }}
          bodyFile: "./build-artifacts/release/release-notes.md"
          allowUpdates: true
          artifacts: "./build-artifacts/release/*.zip,./build-artifacts/release/*.tgz"
          artifactContentType: application/octet-stream
